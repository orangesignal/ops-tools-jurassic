#!/usr/bin/env bash

source "$(cd $(dirname $BASH_SOURCE) && pwd)/lib/functions" || exit $?

###############################################################################
# functions

function myname() {
  echo "$(basename $BASH_SOURCE)"
}

function show_version() {
cat <<-END
$(myname) version 0.2
Copyright 2017 OrangeSignal (Koji Sugisawa).
Licensed under the Apache License, Version 2.0
END
}

function show_common_params() {
cat <<-'END'

Common parameters:
  -h, --help       display help information and exit
  --version        display version information and exit
  -n, --noinput    do not read /dev/stdin
  -q, --quiet      quiet mode
  -v, --verbose    verbose mode
  -F               use given ssh_config file
  -p, --passlist   use given passlist file
  -l, --limit      limits the used bandwidth (kB/sec)
END
}

function show_usage() {
cat <<-END
Usage: $(myname) [-nq] [-F ssh_config] [-p passlist] ssh|scp|cmd|command|service|fetch|copy hostname args...
指定された ops アクションを実行します。
$(show_common_params)

ops アクション名付きの -h または --help を指定することで各アクションの使い方を表示します。

  $(myname) ssh --help
  $(myname) fetch --help
  $(myname) copy --help
  $(myname) cmd --help
  $(myname) service --help

END
}

function show_ssh_usage() {
cat <<-END
Usage: $(myname) [-nq] [-F ssh_config] [-p passlist] ssh hostname [command...]
指定されたホストへ SSH 接続して、指定されたコマンドを実行します。
$(show_common_params)

Examples:
  $(myname) ssh www01 'uname -n && env'

END
}

function show_scp_usage() {
cat <<-END
Usage: $(myname) [-nq] [-F ssh_config] [-p passlist] [-l limit] scp hostname [%u@%h:]src [%u@%h:]dest

$(show_common_params)

Examples:
  $(myname) scp w01 /var/tmp/example.txt %u@%h:/var/tmp/example.txt

END
}

function show_cmd_usage() {
cat <<-END
Usage: $(myname) [-nq] [-F ssh_config] [-p passlist] [-l limit] cmd|command hostname [command...]
Executes a (root) command on a remote node
$(show_common_params)

Examples:
  $(myname) cmd web01 'uname -n && env'

END
}

function show_service_usage() {
cat <<-END
Usage: $(myname) [-nq] [-F ssh_config] [-p passlist] service hostname service_name [command]
指定されたホストへ SSH 接続 + root 化して指定されたサービスへコマンドを実行します。
$(show_common_params)

Examples:
  $(myname) service w01 jenkins restart

END
}

function show_fetch_usage() {
cat <<-END
Usage: $(myname) [-nq] [-F ssh_config] [-p passlist] [-l limit] fetch hostname src dest
Fetches a file from remote nodes

This module works like copy, but in reverse.
It is used for fetching files from remote machines and storing them locally in a file tree, organized by hostname.
$(show_common_params)

Examples:
  $(myname) fetch w01 /var/spool/cron /var/tmp/w01-cron

END
}

function show_copy_usage() {
cat <<-END
Usage: $(myname) [-nq] [-F ssh_config] [-p passlist] [-l limit] copy hostname src dest [-owner [owner][:group]] [-mode mode] [ -backup backup-path] [-suffix suffix]
Copies files to remote locations.

The copy action copies a file on the local box to remote locations.
Use the fetch action to copy files from remote locations to the local box.

Parameters:
  -owner           owner and/or group
  -mode            mode
  -backup          backup path
  -suffix          override the usual backup suffix
$(show_common_params)

END
cat <<-'END'
Examples:
  ops copy w01 /var/tmp/w01/example.html /home/devops/example.html
  ops copy w01 /var/tmp/w01/example.bash /home/devops/example.bash -owner devops -mode '+x'
  ops copy w01 /var/tmp/w01/example.conf /home/devops/example.conf -backup /var/tmp/example.conf -suffix ".$(date +%Y%m%d%H%M)"
  ops copy w01 /var/tmp/w01 /home/devops/examples -mode +rw -backup yes

END
}

function parse_args() {
  ops_type=
  ssh_args=
  scp_args=
  rsync_args=
  noinput=false
  quiet=false
  verbose=false

  local _ops_args=()
  local _owner=
  local _mode=
  local _backup=
  local _suffix=

  while [[ $# > 0 ]]; do
    case "${1}" in
      -- )
        shift
        break
        ;;

      -version | --version )
        show_version
        exit 0
        ;;

      -h | -help | --help )
        case "${ops_type}" in
          ssh )            show_ssh_usage;;
          scp )            show_scp_usage;;
          cmd | command )  show_cmd_usage;;
          service )        show_service_usage;;
          fetch )          show_fetch_usage;;
          copy )           show_copy_usage;;
          * )              show_usage;;
        esac
        exit 0
        ;;

      -F )
        if [[ ! -f "${2}" ]]; then
          abort "$(myname): -F ${2} ssh_config file not found."
        fi
        ssh_args="${ssh_args} -F ${2}"
        shift 2
        ;;
      -p | -passlist | --passlist )
        if [[ ! -f "${2}" ]]; then
          abort "$(myname): -p ${2} passlist file not found."
        fi
        passlist="${2}"
        shift 2
        ;;
      -l | -limit | --limit )
        if [[ "${2}" = '' ]]; then
          abort "$(myname): -l Illegal parameter."
        fi
        # Kbit/sec
        scp_args="${scp_args} -l $((${2} * 8))"
        # kB/sec
        rsync_args="${rsync_args} --bwlimit=${2}"
        shift 2
        ;;

      -owner )
        if [[ "${2}" = '' ]]; then
          abort "$(myname): -owner Illegal parameter."
        fi
        _owner="${2}"
        shift 2
        ;;
      -mode )
        if [[ "${2}" = '' ]]; then
          abort "$(myname): -mode Illegal parameter."
        fi
        _mode="${2}"
        shift 2
        ;;
      -backup )
        if [[ "${2}" = '' ]]; then
          abort "$(myname): -backup Illegal parameter."
        fi
        _backup="${2}"
        shift 2
        ;;
      -suffix )
        if [[ "${2}" = '' ]]; then
          abort "$(myname): -suffix Illegal parameter."
        fi
        _suffix="${2}"
        shift 2
        ;;

      -* )
        if [[ "$1" =~ 'n' ]]; then
          noinput=true
        fi
        if [[ "$1" =~ 'q' ]]; then
          quiet=true
        fi
        if [[ "$1" =~ 'v' ]]; then
          verbose=true
        fi
        shift
        ;;
      -noinput | --noinput )
        noinput=true
        shift
        ;;
      -quiet | --quiet )
        quiet=true
        shift
        ;;
      -verbose | --verbose )
        verbose=true
        shift
        ;;

      ssh | scp | cmd | command | service | fetch | copy )
        ops_type="${1}"
        shift
        ;;
      *)
        _ops_args+=("${1}")
        shift
        ;;
    esac
  done

  while [[ $# > 0 ]]; do
    _ops_args+=("${1}")
    shift
  done

  if ${quiet}; then
    ssh_args="${ssh_args} -q"
    rsync_args="${rsync_args} -q"
  fi
  if ${verbose}; then
    # testable
    :
#    ssh_args="${ssh_args} -v"
#    rsync_args="${rsync_args} -v"
  fi

  # check mandatory parameters
  if [[ "${ops_type}" = '' ]]; then
    abort "$(myname): Unknown ops action."
  fi
  if [[ ${#_ops_args[@]} == 0 ]] || [[ "${_ops_args[0]}" = '' ]]; then
    abort "$(myname): Unknown hostaname."
  fi

  # check dependency parameters
  case "${ops_type}" in
    scp | fetch | copy )
      if [[ "${_ops_args[1]}" = '' ]]; then
        abort "$(myname): Unknown src"
      fi
      if [[ "${_ops_args[2]}" = '' ]]; then
        abort "$(myname): Unknown dest"
      fi
      ;;
    * )
      ;;
  esac

  # copy args
  ops_args=()
  if [[ "${ops_type}" != 'copy' ]]; then
    ops_args+=("${_ops_args[@]}")
  else
    ops_args+=("${_ops_args[0]}")	# hostname
    ops_args+=("${_ops_args[1]}")	# src
    ops_args+=("${_ops_args[2]}")	# dest
    ops_args+=("${_owner}")
    ops_args+=("${_mode}")

    case "${_backup}" in
      [yY]es | [tT]rue | YES | TRUE )
        _backup="yes"
        ;;
      * )
        ;;
    esac

    ops_args+=("${_backup}")
    ops_args+=("${_suffix}")

    # others
    declare -ri _max=${#_ops_args[@]}
    declare -i  _index=3
    while [[ ${_index} < ${_max} ]]; do
      ops_args+=("${_ops_args[${_index}]}")
      _index=$((_index + 1))
    done
  fi
}

###############################################################################
# procedure

if [[ $# == 0 ]]; then
  show_usage
  exit 0
fi

parse_args "$@"

case "${ops_type}" in
  ssh )
    ops_ssh "${ops_args[@]}" || exit $?
    ;;
  scp )
    ops_scp "${ops_args[@]}" || exit $?
    ;;
  cmd | command )
    ops_cmd "${ops_args[@]}" || exit $?
    ;;
  service )
    ops_service "${ops_args[@]}" || exit $?
    ;;
  fetch )
    ops_fetch "${ops_args[@]}" || exit $?
    ;;
  copy )
    ops_copy "${ops_args[@]}" || exit $?
    ;;
  * )
    abort "$(myname): Unsupported ops action."
    ;;
esac
