#!/bin/bash

set -o nounset
set -o pipefail

passlist="${passlist:-}"
ssh_args=
scp_args=
rsync_args=

function self_dir() {
  echo "$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
}

source "$(self_dir)/system"
source "$(self_dir)/io"

ssh_cmd="$(type -tap ssh || abort "ERROR - ssh is not installed or not in your PATH")"
scp_cmd="$(type -tap scp || abort "ERROR - scp is not installed or not in your PATH")"
rsync_cmd="$(type -tap rsync || abort "ERROR - rsync is not installed or not in your PATH")"
sshpass_cmd="$(type -tap sshpass || abort "ERROR - sshpass is not installed or not in your PATH")"

function _find_passlist() {
  local _passlist=
  if [[ -f "${passlist}" ]]; then
    _passlist="${passlist}"
  elif [[ -f "$(pwd)/passlist" ]]; then
    _passlist="$(pwd)/passlist"
  else
     error "Pallist file not found. [${passlist}]"
     return 1
  fi
  echo "${_passlist}"
  return $?
}

function _init_ssh_params() {
  if [[ "${1}" = '' ]]; then
    error "hostname must not be null."
    return 1
  fi

  hostname="${1}"
  local _passlist=
  _passlist=$(_find_passlist)
  if [[ $? != 0 ]]; then
    return $?;
  fi
  local _line=$(cat "${_passlist}" | grep -v -e '^\s*#' -e '^\s*$' | grep -m 1 -e "^${hostname}	")
  if [[ "${_line}" = '' ]]; then
    _line=$(cat "${_passlist}" | grep -v -e '^\s*#' -e '^\s*$' | grep -m 1 -e "^\*	")
    if [[ "${_line}" = '' ]]; then
      error "Unknown hostname ${hostname}"
      return 1
    fi
  fi

  declare -r _glob_ignore_save=${GLOBIGNORE:-}
  GLOBIGNORE=*
  declare -r _ifs_save=$IFS
  IFS='	'
  set -- ${_line}
  if [[ "${_glob_ignore_save}" = '' ]]; then
    unset GLOBIGNORE
  else
    GLOBIGNORE=${_glob_ignore_save}
  fi
  IFS=${_ifs_save}

  username=${2}
  password=${3}
  root_cmd=${4:-'sudo su -'}
  root_password=${5:-${password}}

  return $?
}

function _ops_ssh() {
  ${sshpass_cmd} -p "${password}" ${ssh_cmd} -n${ssh_args} ${username}@${hostname} "$@"
  return $?
}

function _ops_ssh_stdin() {
  cat - | ${sshpass_cmd} -p "${password}" ${ssh_cmd}${ssh_args} ${username}@${hostname} "$@"
  return $?
}

function _ops_scp() {
  ${sshpass_cmd} -p "${password}" ${scp_cmd}${ssh_args}${scp_args} -r "$@"
  return $?
}

function _ops_rsync() {
  ${sshpass_cmd} -p "${password}" ${rsync_cmd} -a -e "${ssh_cmd}${ssh_args}"${rsync_args} "$@"
  return $?
}

function ops_ssh() {
  _init_ssh_params "${1}" || return $?
  shift

  if [[ -p /dev/stdin ]]; then
    _ops_ssh_stdin "$@"
  else
    _ops_ssh "$@"
  fi
  return $?
}

function _placeholder() {
  echo "${1/\%u@\%h:/${username}@${hostname}:}"
}

function ops_scp() {
  _init_ssh_params "${1}" || return $?
  shift

  declare -r _glob_ignore_save=${GLOBIGNORE:-}
  GLOBIGNORE=*
  declare -r _src="$(_placeholder ${1:?})"
  shift
  declare -r _dest="$(_placeholder ${1:?})"
  shift
  if [[ "${_glob_ignore_save}" = '' ]]; then
    unset GLOBIGNORE
  else
    GLOBIGNORE=${_glob_ignore_save}
  fi

  _ops_scp ${_src} ${_dest} "$@"
  return $?
}

###############################################################################
# root operations

function _ops_remote_home_dir() {
  echo '/var/tmp'
}

function _generate_ops_work_name() {
  echo ".ops-$(date +%Y%m%d-%H%M%S)-$(whoami)-$(hostname)"
}

function _ops_mkdir() {
  if [[ "${1}" = '' ]]; then
    error "path must not be null."
    return 1
  fi
  _ops_ssh bash -c "\"if [[ ! -d ${1} ]]; then mkdir -p ${1}; fi\""
  return $?
}

function _ops_rmdir() {
  if [[ "${1}" = '' ]]; then
    error "path must not be null."
    return 1
  fi

  _ops_ssh bash -c "\"if [[ -d ${1} ]]; then rm -rf ${1}; fi\""
  declare -ri _ret=$?
  if [ ${_ret} -ne 0 ]; then
    error "ERROR - Could not remove the remote folder [${hostname}:${1}]."
  fi
  return ${_ret}
}

function _ops_expect() {
  declare -r _echo="${1:?}"
  shift
  declare -r _expfile=${1:?}
  shift
  local _msg=
  _msg=$(expect -f "${_expfile}" -- \
    "${ssh_args}" \
    "${hostname}" \
    "${username}" \
    "${password}" \
    "${root_cmd}" \
    "${root_password}" \
    "$@" \
  )
  declare -ri _ret=$?
  case "${_echo}" in
    noecho )
      ;;
    * )
      if [[ "${_msg}" != '' ]]; then
        echo "${_msg}"
      fi
      ;;
  esac
  return ${_ret}
}

function ops_cmd() {
  _init_ssh_params "${1}" || return $?
  shift

  local _remote_file=
  if [[ -p /dev/stdin ]]; then
    _remote_file="$(_ops_remote_home_dir)/$(_generate_ops_work_name)"
    _ops_ssh_stdin "cat >${_remote_file}" || return $?
  fi

  _ops_expect 'echo' "$(self_dir)/exp/cmd.exp" "${_remote_file}" "$@"
  declare -ri _ret=$?

  if [[ "${_remote_file}" != '' ]]; then
    _ops_ssh bash -c "\"if [[ -f ${_remote_file} ]]; then rm -f ${_remote_file}; fi\""
  fi

  return ${_ret}
}

function ops_service() {
  _init_ssh_params "${1}" || return $?
  shift
  _ops_expect 'echo' "$(self_dir)/exp/service.exp" "$@"
  return $?
}

function ops_copy() {
  _init_ssh_params "${1}" || return $?
  shift
  declare -r _srcs="${1:?}"
  shift

  declare -r _work_name="$(_generate_ops_work_name)"
  declare -r _remote_dir="$(_ops_remote_home_dir)/${_work_name}"
  declare -r _remote_child_dir="${_remote_dir}/${_work_name}"
  declare -r _remote_file="${_remote_dir}/script"
  declare -i _ret=0

  _ops_mkdir "${_remote_child_dir}" || return $?
  # copy remote script file
  _ops_scp "$(self_dir)/remote/copy.bash" "${username}"@"${hostname}":"${_remote_file}"
  _ret=$?
  if [[ ${_ret} == 0 ]]; then
    local _src=
    local _remote_src=
    for _src in $(echo "${_srcs}"); do
      # copy src to work_dir
      _ops_rsync ${_src} "${username}"@"${hostname}":"${_remote_child_dir}"
      _ret=$?
      if [[ ${_ret} != 0 ]]; then
        break
      fi
      # copy work_path to dest (+ chown + chmod)
      _remote_src="${_remote_child_dir}/$(basename ${_src})"
      _ops_expect 'echo' "$(self_dir)/exp/copy.exp" "${_remote_file}" ${_remote_src} "$@"
      _ret=$?
      if [[ ${_ret} != 0 ]]; then
        break
      fi
    done
  fi

  _ops_rmdir "${_remote_dir}"
  return ${_ret}
}

function ops_fetch() {
  _init_ssh_params "${1}" || return $?
  shift

  declare -r _glob_ignore_save=${GLOBIGNORE:-}
  GLOBIGNORE=*

  declare -r _src="${1:?}"
  declare -r _dest="${2:?}"
  declare -r _remote_dir="$(_ops_remote_home_dir)/$(_generate_ops_work_name)"
  declare -r _remote_src="${_remote_dir}/$(basename ${_src})"
  declare -i _ret=0

  _ops_mkdir "${_remote_dir}" || return $?
  _ops_expect 'noecho' "$(self_dir)/exp/fetch.exp" "${_src}" "${_remote_dir}"
  _ret=$?
  if [[ ${_ret} == 0 ]]; then
    _ops_rsync "${username}"@"${hostname}":"${_remote_src}" "${_dest}"
    _ret=$?
    if [[ ${_ret} != 0 ]]; then
      error "ERROR - scp failed."
    fi
  else
    error "ERROR - Fetch failed."
  fi

  _ops_rmdir "${_remote_dir}"
  if [[ "${_glob_ignore_save}" = '' ]]; then
    unset GLOBIGNORE
  else
    GLOBIGNORE=${_glob_ignore_save}
  fi
  return ${_ret}
}
