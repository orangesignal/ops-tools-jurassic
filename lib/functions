#!/bin/bash

# Default config file locations
ssh_config="${ssh_config:-./ssh_config}"
passlist="${passlist:-./passlist.tsv}"

function include() {
  local self_dir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
  source "${self_dir}/system"
  source "${self_dir}/io"
  source "${self_dir}/lang"
}
include

#
# 引数で指定されたホスト名と一致する情報を passlist をから読込んで変数として設定します。
#
# 引数1 - ホスト名
# 引数2 - passlist ファイル (オプション)
#
# 変数 hostname - passlist に一致したホスト名
# 変数 username - passlist に一致したユーザー名
# 変数 password - passlist に一致したパスワード
# 変数 root_cmd - passlist に一致した root 化コマンド
# 変数 root_password - passlist に一致した root 化パスワード
#
function passlist() {
  hostname="${1:?}"

  if [[ ! -f "${passlist}" ]]; then
    abort "${passlist} Pallist file not found."
  fi

  local line=$(cat "${passlist}" | grep -v -e '^\s*#' -e '^\s*$' | grep -e "^${hostname}")
  if [ "${line}" = '' ]; then
    abort "Unknown hostname ${1}"
  fi

  local ifs_save=$IFS
  IFS='	'
  set -- ${line}
  IFS=${ifs_save}

  username=${2}
  password=${3}
  root_cmd=${4:-'sudo su -'}
  root_password=${5:-${password}}
}

function ssh_args() {
  echo "-F ${ssh_config} -q"
}

function ops_ssh() {
  sshpass -p "${password}" ssh $(ssh_args) ${username}@${hostname} "${1}"
}

# リモート環境へ ssh ログインして引数で指定されたディレクトリが存在しなければ作成します。
#
# 引数1 - 作成するディレクトリ
#
function make_remote_dir() {
  local p="${1:?}"
  sshpass -p "${password}" ssh $(ssh_args) ${username}@${hostname} "if [ ! -d ${p} ]; then mkdir -p ${p}; fi"
}

#
# リモート環境へ ssh ログインして引数で指定されたディレクトリが存在すれば削除します。
# 
# 引数1 - 削除するディレクトリ
#
function remove_remote_dir() {
  local  p="${1:?}"
  sshpass -p "${password}" ssh $(ssh_args) ${username}@${hostname} "if [ -d ${p} ]; then rm -rf ${p}; fi"
}

function get_remote_home_dir() {
  echo '/var/tmp'
}

function generate_work_dir_name() {
  echo ".ops-$(date +%Y%m%d-%H%M%S)-$(whoami)-$(hostname)"
}

###############################################################################

function ops_cmd() {
  passlist "${1:?}"
  local cmd="${2}"

  local self_dir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
  local result=$(expect -f ${self_dir}/exp/cmd.exp -- \
    "${ssh_config}" \
    "${hostname}" \
    "${username}" \
    "${password}" \
    "${root_cmd}" \
    "${root_password}" \
    "${cmd}" \
  )
  ret="$?"
  echo "${result}"
  return $ret
}

function ops_service() {
  passlist "${1:?}"
  local service_name="${2:?}"
  local command="${3:?}"

  local self_dir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
  local result=$(expect -f ${self_dir}/exp/service.exp -- \
    "${ssh_config}" \
    "${hostname}" \
    "${username}" \
    "${password}" \
    "${root_cmd}" \
    "${root_password}" \
    "${service_name}" \
    "${command}" \
  )
  ret="$?"
  echo "${result}"
  return $ret
}

function ops_copy() {
  passlist "${1:?}"
  local src="${2:?}"
  local dest="${3:?}"
  local owner="${4}"
  local mode="${5}"

  local remote_home_dir="$(get_remote_home_dir)"
  local work_dir_name="$(generate_work_dir_name)"

  local work_dir="${remote_home_dir}/${work_dir_name}"
  local work_path_name="$(basename "${src}")"
  local work_path="${work_dir}/${work_path_name}"

  make_remote_dir "${work_dir}"

  # copy src to work_dir
  sshpass -p "${password}" rsync -ahv -e "ssh $(ssh_args)" ${src} "${username}"@"${hostname}":"${work_dir}" > /dev/null 2>&1

  # copy work_path to dest (+ chown + chmod)
  local self_dir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
  expect -f ${self_dir}/exp/copy.exp -- \
    "${ssh_config}" \
    "${hostname}" \
    "${username}" \
    "${password}" \
    "${root_cmd}" \
    "${root_password}" \
    "${work_path}" \
    "${dest}" \
    "${owner}" \
    "${mode}"
#    "-avh --log-file=${rsync_log_file}"

#  msg=$(sshpass -p ${password} ssh $(ssh_args) -q ${username}@${hostname} "cat ${rsync_log_file} && rm -rf ${work_dir}")
#  echo "$msg"

  remove_remote_dir "${work_dir}"
}

function ops_fetch() {
  passlist "${1:?}"
  local src="${2:?}"
  local dest="${3:?}"

  local remote_home_dir="$(get_remote_home_dir)"
  local work_dir_name="$(generate_work_dir_name)"

  local work_dir="${remote_home_dir}/${work_dir_name}"
  local work_path_name="$(basename "${src}")"
  local work_path="${work_dir}/${work_path_name}"

  make_remote_dir "${work_dir}"

  local self_dir="$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
  expect -f ${self_dir}/exp/fetch.exp -- \
    "${ssh_config}" \
    "${hostname}" \
    "${username}" \
    "${password}" \
    "${root_cmd}" \
    "${root_password}" \
    ${src} \
    "${work_dir}"

  sshpass -p "${password}" scp $(ssh_args) -r "${username}"@"${hostname}":${work_path} "${dest}" > /dev/null 2>&1

  remove_remote_dir "${work_dir}"
}
