#!/bin/bash

# Default config file locations
ssh_config="${ssh_config:-./ssh_config}"
passlist="${passlist:-./passlist.tsv}"
scp_args="${scp_args}"
rsync_args="${rsync_args}"

function self_dir() {
  echo "$(cd "$(dirname "$BASH_SOURCE")" && pwd)"
}

source "$(self_dir)/system"
source "$(self_dir)/io"

#
# 引数で指定されたホスト名と一致する情報を passlist をから読込んで変数として設定します。
#
# 引数1 - ホスト名
#
# 変数 hostname - passlist に一致したホスト名
# 変数 username - passlist に一致したユーザー名
# 変数 password - passlist に一致したパスワード
# 変数 root_cmd - passlist に一致した root 化コマンド
# 変数 root_password - passlist に一致した root 化パスワード
#
function passlist() {
  if [ "${1}" = '' ]; then
    abort "hostname must not be null."
  fi
  if [[ ! -f "${passlist}" ]]; then
    abort "${passlist} Pallist file not found."
  fi

  hostname="${1}"

  declare -r _line=$(cat "${passlist}" | grep -v -e '^\s*#' -e '^\s*$' | grep -m 1 -e "^${hostname}	")
  if [ "${_line}" = '' ]; then
    abort "Unknown hostname ${hostname}"
  fi

  declare -r _ifs_save=$IFS
  IFS='	'
  set -- ${_line}
  IFS=${_ifs_save}

  username=${2}
  password=${3}
  root_cmd=${4:-'sudo su -'}
  root_password=${5:-${password}}
}

function ssh_args() {
  echo "-q -F ${ssh_config}"
}

function ops_ssh() {
  passlist "${1}"
  shift
  sshpass -p "${password}" ssh -n $(ssh_args) ${username}@${hostname} "$@"
}

# リモート環境へ ssh ログインして引数で指定されたディレクトリが存在しなければ作成します。
#
# 引数1 - 作成するディレクトリ
#
function make_remote_dir() {
  if [ "${1}" = '' ]; then
    abort "path must not be null."
  fi

  sshpass -p "${password}" ssh -n $(ssh_args) ${username}@${hostname} bash -c "\"if [[ ! -d ${1} ]]; then mkdir -p ${1}; fi\""
}

#
# リモート環境へ ssh ログインして引数で指定されたディレクトリが存在すれば削除します。
# 
# 引数1 - 削除するディレクトリ
#
function remove_remote_dir() {
  if [ "${1}" = '' ]; then
    abort "path must not be null."
  fi

  sshpass -p "${password}" ssh -n $(ssh_args) ${username}@${hostname} bash -c "\"if [[ -d ${1} ]]; then rm -rf ${1}; fi\""
  declare -ri _ret=$?
  if [ ${_ret} -ne 0 ]; then
    error "ERROR - Could not remove the remote folder [${hostname}:${1}]."
  fi
  return ${_ret}
}

function get_remote_home_dir() {
  echo '/var/tmp'
}

function generate_work_dir_name() {
  echo ".ops-$(date +%Y%m%d-%H%M%S)-$(whoami)-$(hostname)"
}

###############################################################################

function ops_cmd() {
  passlist "${1}"
  shift

  declare -r _msg=$(expect -f "$(self_dir)/exp/cmd.exp" -- \
    "${ssh_config}" \
    "${hostname}" \
    "${username}" \
    "${password}" \
    "${root_cmd}" \
    "${root_password}" \
    "$@" \
  )
  declare -ri _ret=$?
  echo "${_msg}"
  return ${_ret}
}

function ops_service() {
  passlist "${1}"
  shift

  declare -r _msg=$(expect -f "$(self_dir)/exp/service.exp" -- \
    "${ssh_config}" \
    "${hostname}" \
    "${username}" \
    "${password}" \
    "${root_cmd}" \
    "${root_password}" \
    "$@" \
  )
  declare -ri _ret=$?
  echo "${_msg}"
  return ${_ret}
}

function ops_copy() {
  passlist "${1}"

  declare -r _src="${2:?}"
  declare -r _dest="${3:?}"
  declare -r _owner="${4}"
  declare -r _mode="${5}"
  declare -r _backup="${6}"
  declare -r _suffix="${7}"

  declare -r _remote_home_dir="$(get_remote_home_dir)"
  declare -r _work_dir_name="$(generate_work_dir_name)"

  declare -r _ops_dir="${_remote_home_dir}/${_work_dir_name}"
  declare -r _ops_file="${_ops_dir}/script"

  declare -r _work_dir="${_ops_dir}/${_work_dir_name}"
  declare -r _work_path_name="$(basename "${_src}")"
  declare -r _work_path="${_work_dir}/${_work_path_name}"

  declare -i _ret=0

  make_remote_dir "${_work_dir}"

  # copy src to work_dir
  sshpass -p "${password}" rsync -ahv -e "ssh $(ssh_args)" ${rsync_args} ${_src} "${username}"@"${hostname}":"${_work_dir}" > /dev/null 2>&1
  _ret=$?
  if [ ${_ret} -ne 0 ]; then
    error "ERROR - copy failed."
  else
    # copy remote script
    sshpass -p "${password}" scp $(ssh_args) ${scp_args} "$(self_dir)/remote/copy.bash" "${username}"@"${hostname}":"${_ops_file}" > /dev/null 2>&1
    _ret=$?
    if [ ${_ret} -ne 0 ]; then
      error "ERROR - script failed."
    else
      # copy work_path to dest (+ chown + chmod)
      declare -r _msg=$(expect -f "$(self_dir)/exp/copy.exp" -- \
        "${ssh_config}" \
        "${hostname}" \
        "${username}" \
        "${password}" \
        "${root_cmd}" \
        "${root_password}" \
        "${_ops_file}" \
        "${_work_path}" \
        "${_dest}" \
        "${_owner}" \
        "${_mode}" \
        "${_backup}" \
        "${_suffix}" \
      )
      _ret=$?
      echo "${_msg}"
    fi
  fi

  remove_remote_dir "${_ops_dir}"

  return ${_ret}
}

function ops_fetch() {
  passlist "${1}"

  declare -r _src="${2:?}"
  declare -r _dest="${3:?}"

  declare -r _remote_home_dir="$(get_remote_home_dir)"
  declare -r _work_dir_name="$(generate_work_dir_name)"

  declare -r _work_dir="${_remote_home_dir}/${_work_dir_name}"
  declare -r _work_path_name="$(basename "${_src}")"
  declare -r _work_path="${_work_dir}/${_work_path_name}"

  declare -i _ret=0

  make_remote_dir "${_work_dir}"

  expect -f "$(self_dir)/exp/fetch.exp" -- \
    "${ssh_config}" \
    "${hostname}" \
    "${username}" \
    "${password}" \
    "${root_cmd}" \
    "${root_password}" \
    ${_src} \
    "${_work_dir}"
  _ret=$?

  if [ ${_ret} -ne 0 ]; then
    error "ERROR - Fetch failed."
  else
    sshpass -p "${password}" scp $(ssh_args) ${scp_args} -r "${username}"@"${hostname}":${_work_path} "${_dest}" > /dev/null 2>&1
    _ret=$?
    if [ ${_ret} -ne 0 ]; then
      error "ERROR - scp failed."
    fi
  fi

  remove_remote_dir "${_work_dir}"

  return ${_ret}
}
