#!/usr/bin/expect -f

if { [llength $argv] == 0 } {
  puts "Usage: expect -f $argv0 -- \'ssh_args\' hostname username \'password\' root_cmd \'root_password\' src dest"
  exit 0
}

set self_dir [file dirname $argv0]
source "$self_dir/procedures"

###############################################################################
# variables

set ssh_cmd       [exec which ssh]

# parse args
set ssh_args      [lindex $argv 0]
set hostname      [lindex $argv 1]
set username      [lindex $argv 2]
set password      [lindex $argv 3]
set root_cmd      [lindex $argv 4]
set root_password [lindex $argv 5]
set src           [lindex $argv 6]
set dest          [lindex $argv 7]

# validation
assertNotEmpty $hostname "hostname must not be null\n"
assertNotEmpty $username "username must not be null\n"
assertNotEmpty $root_cmd "root_cmd must not be null\n"
assertNotEmpty $src      "src must not be null\n"
assertNotEmpty $dest     "dest must not be null\n"

set cmd "rsync -a -q $src $dest && chown -R $username $dest && chmod -R +rw $dest"

###############################################################################
# spawn - ssh login + switch to root

# BUGS - http://www.tcl.tk/man/expect5.31/expect.1.html
if { ![info exists env(TERM)] } { set env(TERM) vt100 }
if { ![info exists env(SHELL)] } { set env(SHELL) /bin/sh }
if { ![info exists env(HOME)] } { set env(HOME) /usr/local/bin }
if { ![info exists env(LANG)] } { set env(LANG) C }

set timeout 10
eval spawn -noecho $ssh_cmd $ssh_args -t $username@$hostname $root_cmd

set multiPrompt {[^\n]*[#>$] $}
set password_prompt {[^\n]*[pP]assword: $}
set su_password_prompt {[^\n]*:[ ]*$}

log_user 0

expect {
  eof     { abort "SSH failure for remote host $hostname\n" 255 }
  timeout { abort "Failed to get password prompt\n" 255 }
  -glob "(yes/no)?" {
    send -- "yes\r"
    exp_continue
  }
  -re $password_prompt {
    send -- "$password\r"
  }
}
expect {
  timeout { abort "Login failed. Password incorrect.\n" 5 }
  -re $multiPrompt {
    # sudo NOPASSWD
  }
  -re $su_password_prompt {
    send -- "$root_password\r"
    expect {
      timeout { abort "Failed to Switch Root.\n" 5 }
      -re $multiPrompt
    }
  }
}

###############################################################################
# operation (root)

set timeout -1
set prompt "[reEscape $expect_out(0,string)]$"

send -- " export HISTCONTROL=ignorespace\r"
expect {
  -re $prompt
}

# execute command
send -- " $cmd\r"
expect {
  -re "\n(.*\r).*$prompt" {
    set msg [string trimright "$expect_out(1,string)" "\r"]
    send_user -- "$msg\n"
  }
  -re $prompt
}

# command status
send -- " echo \$?\r"
expect {
  -re "\n(\[^\r]*)\r"
}
set cmd_status "$expect_out(1,string)"

expect {
  -re $prompt
}

# root exit
send -- " exit\r"

###############################################################################
# terminate

expect eof
catch wait result
set os_error [lindex $result 2]
if { $os_error == -1 } {
  send_error -- "Fail to exec\n"
  exit 127
}
set status [lindex $result 3]
if { $status == 0 } {
  exit $cmd_status
}
exit $status
