#!/usr/bin/expect -f

if { [llength $argv] == 0 } {
  puts "Usage: expect -f $argv0 -- ssh_config hostname username \'password\' root_cmd \'root_password\' src dest"
  exit 0
}

###############################################################################

proc abort { msg } {
  send_error "$msg"
  exit 1
}

###############################################################################

set env(TERM) vt100
set env(LANG) C

set prompt {[#>$]}
set pw_prompt {[:]}

set ssh_config    [lindex $argv 0]
set hostname      [lindex $argv 1]
set username      [lindex $argv 2]
set password      [lindex $argv 3]
set root_cmd      [lindex $argv 4]
set root_password [lindex $argv 5]
set src           [lindex $argv 6]
set dest          [lindex $argv 7]

if { $ssh_config eq "" } {
  abort "ssh_config must not be null\n"
}
if { $hostname eq "" } {
  abort "hostname must not be null\n"
}
if { $username eq "" } {
  abort "username must not be null\n"
}
if { $root_cmd eq "" } {
  abort "root_cmd must not be null\n"
}
if { $src eq "" } {
  abort "src must not be null\n"
}
if { $dest eq "" } {
  abort "dest must not be null\n"
}

set cmd "rsync -avh $src $dest && chown -R $username $dest && chmod -R +rw $dest"

###############################################################################

# ssh login + switch to root
log_user 0
set timeout 10
spawn ssh -F ${ssh_config} -q -t $username@$hostname $root_cmd

###############################################################################

expect {
  eof     { abort "SSH failure for remote host $hostname\n" }
  timeout { abort "Failed to get password prompt\n" }
  password: 
}
send -- "$password\r"
expect {
  timeout { abort "Login failed. Password incorrect.\n" }
  : 
}
send -- "$root_password\r"
expect {
  timeout { abort "Login failed. Password incorrect.\n" }
  -re $prompt
}

set timeout -1

# execute command
send -- "$cmd\r"
expect {
  -re "(\n.*\r)(.*$prompt)"
}
set msg [string trim "$expect_out(1,string)"]
send_user "$msg\n"

# command status
send -- "echo \$?\r"
expect {
  -re "\n(\[^\r]*)\r"
}
set cmd_status "$expect_out(1,string)"

expect {
  -re $prompt
}

# root exit
send -- "exit\r"

###############################################################################
# terminate

expect eof
catch wait result
set os_error [lindex $result 2]
if { $os_error == -1 } {
  send_error "Fail to exec\n"
  exit 127
}
set status [lindex $result 3]
if { $status == 0 } {
  exit $cmd_status
}
exit $status
