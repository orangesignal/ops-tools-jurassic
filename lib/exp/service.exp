#!/usr/bin/expect -f
log_user 0

if { [llength $argv] == 0 } {
  puts "Usage: expect -f $argv0 -- \'ssh_args\' hostname username \'password\' root_cmd \'root_password\' service_name command"
  exit 0
}

###############################################################################

proc abort { msg } {
  send_error "$msg"
  exit 1
}

###############################################################################

set env(TERM) vt100
set env(LANG) C
set env(SHELL) /bin/sh
set env(HOME) /usr/local/bin

set prompt {[#>$] }
set pw_prompt {[:]}

set ssh_args      [lindex $argv 0]
set hostname      [lindex $argv 1]
set username      [lindex $argv 2]
set password      [lindex $argv 3]
set root_cmd      [lindex $argv 4]
set root_password [lindex $argv 5]
set service_name  [lindex $argv 6]
set cmd           [lindex $argv 7]

for { set i 8 } { $i < [llength $argv] } { incr i } {
  append cmd " [lindex $argv $i]"
}

if { $hostname eq "" } {
  abort "hostname must not be null\n"
}
if { $username eq "" } {
  abort "username must not be null\n"
}
if { $root_cmd eq "" } {
  abort "root_cmd must not be null\n"
}
if { $service_name eq "" } {
  abort "service_name must not be null\n"
}
if { $cmd eq "" } {
  abort "cmd must not be null\n"
}

###############################################################################

# ssh login + switch to root
set timeout 10
eval spawn -noecho ssh $ssh_args -t $username@$hostname $root_cmd

###############################################################################

expect {
  eof     { abort "SSH failure for remote host $hostname\n" }
  timeout { abort "Failed to get password prompt\n" }
  password: {
#    stty -echo
    send -- "$password\r"
#    stty echo
  }
}
expect {
  timeout { abort "Login failed. Password incorrect.\n" }
  -re $prompt {
  }
  : {
#    stty -echo
    send -- "$root_password\r"
#    stty echo
    expect {
      timeout { abort "Failed to Switch Root.\n" }
      -re $prompt
    }
  }
}

set timeout -1

# execute service command
send -- "service $service_name $cmd\r"
expect {
  -re $prompt
}

# command status
send -- "echo \$?\r"
expect {
  -re "\n(\[^\r]*)\r"
}
set cmd_status "$expect_out(1,string)"

expect {
  -re $prompt
}

# get process count
sleep 1
send -- "ps ax | grep $service_name | grep -v grep | grep -c ''\r"
expect {
  -re "\n(\[^\r]*)\r"
}
send_user "$expect_out(1,string)"

expect {
  -re $prompt
}

# root exit
send -- "exit\r"

###############################################################################
# terminate

expect eof
catch wait result
set os_error [lindex $result 2]
if { $os_error == -1 } {
  send_error "Fail to exec\n"
  exit 127
}
set status [lindex $result 3]
if { $status == 0 } {
  exit $cmd_status
}
exit $status
