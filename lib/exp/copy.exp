#!/usr/bin/expect -f

set env(TERM) vt100
set env(LANG) C

proc abort { msg } {
  send_error "$msg"
  exit 1
}

set prompt {[#>$]}
set pw_prompt {[:]}

set ssh_config    [lindex $argv 0]
set hostname      [lindex $argv 1]
set username      [lindex $argv 2]
set password      [lindex $argv 3]
set root_cmd      [lindex $argv 4]
set root_password [lindex $argv 5]
set ops_file      [lindex $argv 6]
set src           [lindex $argv 7]
set dest          [lindex $argv 8]
set owner         [lindex $argv 9]
set mode          [lindex $argv 10]
set backup        [lindex $argv 11]
set suffix        [lindex $argv 12]

set cmd "bash $ops_file $src $dest"
if { $owner ne "" } {
  append cmd " $owner"
} else {
  append cmd " ''"
}
if { $mode ne "" } {
  append cmd " $mode"
} else {
  append cmd " ''"
}
if { $backup ne "" } {
  append cmd " $backup"
} else {
  append cmd " ''"
}
if { $suffix ne "" } {
  append cmd " $suffix"
} else {
  append cmd " ''"
}

# ssh login + switch to root
log_user 0
set timeout 10
spawn ssh -F ${ssh_config} -q -t $username@$hostname $root_cmd
expect {
  eof     { abort "SSH failure for remote host $hostname\n" }
  timeout { abort "Failed to get password prompt\n" }
  password: 
}
send -- "$password\r"
expect {
  timeout { abort "Login failed. Password incorrect.\n" }
  : 
}
send -- "$root_password\r"
expect {
  timeout { abort "Login failed. Password incorrect.\n" }
  -re $prompt
}

set timeout -1

# execute command
send -- "$cmd\r"
expect {
  -re "(\n.*\r)(.*$prompt)"
}
set msg [string trim "$expect_out(1,string)"]
send_user "$msg\n"

# command status
send -- "echo \$?\r"
expect {
  -re "\n(\[^\r]*)\r"
}
set cmd_status "$expect_out(1,string)"

expect {
  -re $prompt
}

# root exit
send -- "exit\r"

# terminate
expect eof
catch wait result
set os_error [lindex $result 2]
if { $os_error == -1 } {
  send_error "Fail to exec\n"
  exit 127
}
set status [lindex $result 3]
if { $status == 0 } {
  exit $cmd_status
}
exit $status
