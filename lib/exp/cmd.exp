#!/usr/bin/expect -f
log_user 0

if { [llength $argv] == 0 } {
  puts "Usage: expect -f $argv0 -- \'ssh_args\' hostname username \'password\' root_cmd \'root_password\' \'remote_file\' \[command...\]"
  exit 0
}

set self_dir [file dirname $argv0]
source "$self_dir/procedures"

###############################################################################
# procedure

proc createCommand { argv start } {
  set _remote_file  [lindex $argv $start]
  set _command      [lindex $argv [expr $start + 1]]
  for { set _index [expr $start + 2] } { $_index < [llength $argv] } { incr _index } {
    append _command " [defaultString [lindex $argv $_index] '']"
  }
  if { $_remote_file ne ""  } {
    return "cat $_remote_file | $_command"
  }
  return "$_command"
}

###############################################################################
# variables

set env(TERM) vt100
set env(LANG) C
set env(SHELL) /bin/sh
set env(HOME) /usr/local/bin

set multiPrompt {[#>$] $}
set password_prompt {[^\n]*[pP]assword: $}
set su_password_prompt {[^\n]*:[ ]*$}

set ssh_cmd       [exec which ssh]

# parse args
set ssh_args      [lindex $argv 0]
set hostname      [lindex $argv 1]
set username      [lindex $argv 2]
set password      [lindex $argv 3]
set root_cmd      [lindex $argv 4]
set root_password [lindex $argv 5]
set cmd           [createCommand $argv 6]

# validation
assertNotEmpty $hostname "hostname must not be null\n"
assertNotEmpty $username "username must not be null\n"
assertNotEmpty $root_cmd "root_cmd must not be null\n"

###############################################################################
# spawn - ssh login + switch to root

set timeout 10
eval spawn -noecho $ssh_cmd $ssh_args -t $username@$hostname $root_cmd

expect {
  eof     { abort "SSH failure for remote host $hostname\n" 255 }
  timeout { abort "Failed to get password prompt\n" 255 }
  -re $password_prompt {
    send -- "$password\r"
  }
}
expect {
  timeout { abort "Login failed. Password incorrect.\n" 5 }
  -re $multiPrompt {
    # sudo NOPASSWD
  }
  -re $su_password_prompt {
    send -- "$root_password\r"
    expect {
      timeout { abort "Failed to Switch Root.\n" 5 }
      -re $multiPrompt
    }
  }
}

###############################################################################
# operation (root)

set prompt "[reEscape [getPrompt $expect_out(buffer) $multiPrompt]]$"
set timeout -1
set cmd_status 0

send -- " export HISTCONTROL=ignorespace:ignoredups\r"
expect {
  -re $prompt
}

if { [string length $cmd] > 0 } {
  # execute command
  send -- " ${cmd}\r"
  expect {
    -re "\n(.*\r).*$prompt" {
      set msg [string trimright "$expect_out(1,string)" "\r"]
      send_user -- "$msg\n"
    }
    -re $prompt
  }

  # command status
  send -- " echo \$?\r"
  expect {
    -re "\n(\[^\r]*)\r"
  }
  set cmd_status "$expect_out(1,string)"

  expect {
    -re $prompt
  }
}

# root exit
send -- " exit\r"

###############################################################################
# terminate

expect eof
catch wait result
set os_error [lindex $result 2]
if { $os_error == -1 } {
  send_error -- "Fail to exec\n"
  exit 127
}
set status [lindex $result 3]
if { $status == 0 } {
  exit $cmd_status
}
exit $status