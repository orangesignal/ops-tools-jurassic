#!/usr/bin/expect -f
log_user 0

if { [llength $argv] == 0 } {
  puts "Usage: expect -f $argv0 -- \'ssh_args\' hostname username \'password\' root_cmd \'root_password\' \[command...\]"
  exit 0
}

###############################################################################

proc abort { msg } {
  send_error "${msg}"
  exit 1
}

proc create_cmd { argv start } {
  set _remote_file  [lindex $argv $start]
  set _cmd          ""
  incr start
  for { set _index $start } { $_index < [llength $argv] } { incr _index } {
    set _str [lindex $argv $_index]
    if { $_str eq "" } {
      append _cmd " ''"
    } else {
      append _cmd " $_str"
    }
  }
  if { $_remote_file eq ""  } {
    return "$_cmd"
  } else {
    return "cat $_remote_file | $_cmd"
  }
}

proc assertNotEmpty { var { msg "assertion failed" } } {
  if { $var eq "" } { abort $msg }
}

proc get_prompt_line { buffer prompt } {
  set lines [split $buffer "\n"]
  foreach line $lines {
    if { [regexp $prompt $line] } {
      set _prompt "$line"
      break
    }
  }
  if { ![info exists _prompt] } {
    abort "Failed to get prompt line\n"
  }
  return $_prompt
}

###############################################################################

set env(TERM) vt100
set env(LANG) C
set env(SHELL) /bin/sh
set env(HOME) /usr/local/bin

set prompt {[#>$] }
set pw_prompt {[:]}

# parse args
set ssh_args      [lindex $argv 0]
set hostname      [lindex $argv 1]
set username      [lindex $argv 2]
set password      [lindex $argv 3]
set root_cmd      [lindex $argv 4]
set root_password [lindex $argv 5]
set cmd           [create_cmd $argv 6]

# validation
assertNotEmpty $hostname
assertNotEmpty $username
assertNotEmpty $root_cmd

###############################################################################

# ssh login + switch to root
set timeout 10
eval spawn -noecho ssh $ssh_args -t $username@$hostname $root_cmd

###############################################################################

expect {
  eof     { abort "SSH failure for remote host $hostname\n" }
  timeout { abort "Failed to get password prompt\n" }
  *assword: {
    send -- "$password\r"
  }
}
expect {
  timeout { abort "Login failed. Password incorrect.\n" }
  -re $prompt {
  }
  : {
    send -- "$root_password\r"
    expect {
      timeout { abort "Failed to Switch Root.\n" }
      -re $prompt
    }
  }
}

set _prompt [get_prompt_line $expect_out(buffer) $prompt]
set timeout -1
set cmd_status 0

if { [string length $cmd] > 0 } {
  # execute command
  send -- "$cmd\r"
  expect {
    -re "\n(.*\r).*$_prompt" {
      set msg [string trimright "$expect_out(1,string)"]
      send_user -- "$msg\n"
    }
    -re $_prompt
  }

  # command status
  send -- "echo \$?\r"
  expect {
    -re "\n(\[^\r]*)\r"
  }
  set cmd_status "$expect_out(1,string)"

  expect {
    -re $_prompt
  }
}

# root exit
send -- "exit\r"

###############################################################################
# terminate

expect eof
catch wait result
set os_error [lindex $result 2]
if { $os_error == -1 } {
  send_error "Fail to exec\n"
  exit 127
}
set status [lindex $result 3]
if { $status == 0 } {
  exit $cmd_status
}
exit $status